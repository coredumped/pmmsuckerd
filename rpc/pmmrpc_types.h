/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef pmmrpc_TYPES_H
#define pmmrpc_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace pmmrpc {

typedef struct _Command__isset {
  _Command__isset() : name(false), parameter(false) {}
  bool name;
  bool parameter;
} _Command__isset;

class Command {
 public:

  static const char* ascii_fingerprint; // = "F7C641917C22B35AE581CCD54910B00D";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0xC6,0x41,0x91,0x7C,0x22,0xB3,0x5A,0xE5,0x81,0xCC,0xD5,0x49,0x10,0xB0,0x0D};

  Command() : name() {
  }

  virtual ~Command() throw() {}

  std::string name;
  std::map<std::string, std::string>  parameter;

  _Command__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_parameter(const std::map<std::string, std::string> & val) {
    parameter = val;
  }

  bool operator == (const Command & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(parameter == rhs.parameter))
      return false;
    return true;
  }
  bool operator != (const Command &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Command & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Command &a, Command &b);

typedef struct _FetchDBItem__isset {
  _FetchDBItem__isset() : timestamp(false), email(false), uid(false) {}
  bool timestamp;
  bool email;
  bool uid;
} _FetchDBItem__isset;

class FetchDBItem {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  FetchDBItem() : timestamp(0), email(), uid() {
  }

  virtual ~FetchDBItem() throw() {}

  int32_t timestamp;
  std::string email;
  std::string uid;

  _FetchDBItem__isset __isset;

  void __set_timestamp(const int32_t val) {
    timestamp = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_uid(const std::string& val) {
    uid = val;
  }

  bool operator == (const FetchDBItem & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const FetchDBItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchDBItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FetchDBItem &a, FetchDBItem &b);

typedef struct _FetchDBInitialSyncItem__isset {
  _FetchDBInitialSyncItem__isset() : email(false), uids(false) {}
  bool email;
  bool uids;
} _FetchDBInitialSyncItem__isset;

class FetchDBInitialSyncItem {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  FetchDBInitialSyncItem() : email() {
  }

  virtual ~FetchDBInitialSyncItem() throw() {}

  std::string email;
  std::vector<std::string>  uids;

  _FetchDBInitialSyncItem__isset __isset;

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_uids(const std::vector<std::string> & val) {
    uids = val;
  }

  bool operator == (const FetchDBInitialSyncItem & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(uids == rhs.uids))
      return false;
    return true;
  }
  bool operator != (const FetchDBInitialSyncItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchDBInitialSyncItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FetchDBInitialSyncItem &a, FetchDBInitialSyncItem &b);

typedef struct _NotificationPayload__isset {
  _NotificationPayload__isset() : devtoken(false), message(false), sound(false), badge(false) {}
  bool devtoken;
  bool message;
  bool sound;
  bool badge;
} _NotificationPayload__isset;

class NotificationPayload {
 public:

  static const char* ascii_fingerprint; // = "194A357BC9EE908DC4763D0A5147760A";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x4A,0x35,0x7B,0xC9,0xEE,0x90,0x8D,0xC4,0x76,0x3D,0x0A,0x51,0x47,0x76,0x0A};

  NotificationPayload() : devtoken(), message(), sound(), badge(0) {
  }

  virtual ~NotificationPayload() throw() {}

  std::string devtoken;
  std::string message;
  std::string sound;
  int32_t badge;

  _NotificationPayload__isset __isset;

  void __set_devtoken(const std::string& val) {
    devtoken = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  void __set_sound(const std::string& val) {
    sound = val;
  }

  void __set_badge(const int32_t val) {
    badge = val;
  }

  bool operator == (const NotificationPayload & rhs) const
  {
    if (!(devtoken == rhs.devtoken))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(sound == rhs.sound))
      return false;
    if (!(badge == rhs.badge))
      return false;
    return true;
  }
  bool operator != (const NotificationPayload &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationPayload & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotificationPayload &a, NotificationPayload &b);

typedef struct _MailAccountInfo__isset {
  _MailAccountInfo__isset() : email(false), mailboxType(false), username(false), password(false), serverAddress(false), serverPort(false), useSSL(false), devTokens(false), isEnabled(false), quota(false), devel(false) {}
  bool email;
  bool mailboxType;
  bool username;
  bool password;
  bool serverAddress;
  bool serverPort;
  bool useSSL;
  bool devTokens;
  bool isEnabled;
  bool quota;
  bool devel;
} _MailAccountInfo__isset;

class MailAccountInfo {
 public:

  static const char* ascii_fingerprint; // = "48C5E37CB8D6243BAEFBE58A57200C77";
  static const uint8_t binary_fingerprint[16]; // = {0x48,0xC5,0xE3,0x7C,0xB8,0xD6,0x24,0x3B,0xAE,0xFB,0xE5,0x8A,0x57,0x20,0x0C,0x77};

  MailAccountInfo() : email(), mailboxType(), username(), password(), serverAddress(), serverPort(0), useSSL(0), isEnabled(0), quota(0), devel(0) {
  }

  virtual ~MailAccountInfo() throw() {}

  std::string email;
  std::string mailboxType;
  std::string username;
  std::string password;
  std::string serverAddress;
  int32_t serverPort;
  bool useSSL;
  std::vector<std::string>  devTokens;
  bool isEnabled;
  int32_t quota;
  bool devel;

  _MailAccountInfo__isset __isset;

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_mailboxType(const std::string& val) {
    mailboxType = val;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_serverAddress(const std::string& val) {
    serverAddress = val;
  }

  void __set_serverPort(const int32_t val) {
    serverPort = val;
  }

  void __set_useSSL(const bool val) {
    useSSL = val;
  }

  void __set_devTokens(const std::vector<std::string> & val) {
    devTokens = val;
  }

  void __set_isEnabled(const bool val) {
    isEnabled = val;
  }

  void __set_quota(const int32_t val) {
    quota = val;
  }

  void __set_devel(const bool val) {
    devel = val;
  }

  bool operator == (const MailAccountInfo & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(mailboxType == rhs.mailboxType))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(serverAddress == rhs.serverAddress))
      return false;
    if (!(serverPort == rhs.serverPort))
      return false;
    if (!(useSSL == rhs.useSSL))
      return false;
    if (!(devTokens == rhs.devTokens))
      return false;
    if (!(isEnabled == rhs.isEnabled))
      return false;
    if (!(quota == rhs.quota))
      return false;
    if (!(devel == rhs.devel))
      return false;
    return true;
  }
  bool operator != (const MailAccountInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MailAccountInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MailAccountInfo &a, MailAccountInfo &b);

typedef struct _GenericException__isset {
  _GenericException__isset() : errorCode(false), errorMessage(false) {}
  bool errorCode;
  bool errorMessage;
} _GenericException__isset;

class GenericException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  GenericException() : errorCode(0), errorMessage() {
  }

  virtual ~GenericException() throw() {}

  int32_t errorCode;
  std::string errorMessage;

  _GenericException__isset __isset;

  void __set_errorCode(const int32_t val) {
    errorCode = val;
  }

  void __set_errorMessage(const std::string& val) {
    errorMessage = val;
  }

  bool operator == (const GenericException & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(errorMessage == rhs.errorMessage))
      return false;
    return true;
  }
  bool operator != (const GenericException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GenericException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GenericException &a, GenericException &b);

typedef struct _FetchDBUnableToPutItemException__isset {
  _FetchDBUnableToPutItemException__isset() : item(false), errorMessage(false) {}
  bool item;
  bool errorMessage;
} _FetchDBUnableToPutItemException__isset;

class FetchDBUnableToPutItemException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "D64E8622DC3BED8546558B0ADE7FCD75";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0x4E,0x86,0x22,0xDC,0x3B,0xED,0x85,0x46,0x55,0x8B,0x0A,0xDE,0x7F,0xCD,0x75};

  FetchDBUnableToPutItemException() : errorMessage() {
  }

  virtual ~FetchDBUnableToPutItemException() throw() {}

  FetchDBItem item;
  std::string errorMessage;

  _FetchDBUnableToPutItemException__isset __isset;

  void __set_item(const FetchDBItem& val) {
    item = val;
  }

  void __set_errorMessage(const std::string& val) {
    errorMessage = val;
  }

  bool operator == (const FetchDBUnableToPutItemException & rhs) const
  {
    if (!(item == rhs.item))
      return false;
    if (!(errorMessage == rhs.errorMessage))
      return false;
    return true;
  }
  bool operator != (const FetchDBUnableToPutItemException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FetchDBUnableToPutItemException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FetchDBUnableToPutItemException &a, FetchDBUnableToPutItemException &b);

} // namespace

#endif
